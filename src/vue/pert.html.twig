{% extends 'base.html.twig' %}

{% block title %}Hello PertController!{% endblock %}

{% block body %}
 <script src="https://unpkg.com/gojs@2.2.6/release/go.js"></script>
  <div id="allSampleContent" class="p-4 w-full">
    <script id="code">

    function init() {
     
    var jsTachePreced = document.querySelector('.js-tache-preced');
    var tachePrecedString = jsTachePreced.dataset.isAuthenticated;
    var jsTableNiveau = document.querySelector('.js-table-niveau');
    var niveauString = jsTableNiveau.dataset.isAuthenticated;
    var jsTableTaches = document.querySelector('.js-table-info-taches');
    var tachesString = jsTableTaches.dataset.isAuthenticated;
    
    alert(tachesString);
    var tableTachePrecedent = [];
    var niveau1 = [];
    var dernierNiv = [];
    var niveaux = niveauString.substring(1,niveauString.length);
    niveaux = niveaux.substring(0, niveaux.length - 1);
    var premierNiveau = niveaux.match(/\[(.*?)\]/ig);
    var dernierNiveau = niveaux.match(/\[(.*?)\]/ig);
    dernierNiveau = dernierNiveau[premierNiveau.length-1].match(/(?<=\").*?(?=\")/ig);
    premierNiveau = premierNiveau[0].match(/(?<=\").*?(?=\")/ig);
    var id_tache = tachePrecedString.split('id_tache":"');
    var id_tache_precedente = tachePrecedString.split('id_tache_precedente":"');
   

    id_tache.forEach((item, index) => {
    if (index == 0){
      return;}
    let id = item.split('"');
    let id_precedent = id_tache_precedente[index].split('"');
    tableTachePrecedent.push([id[0],id_precedent[0]]);

    }); 
    premierNiveau.forEach((item, index) => {
    if (index%2 == 0 || index ==0){
          niveau1.push(item);  
      }

    }); 
    dernierNiveau.forEach((item, index) => {
    if (index%2 == 0 || index ==0){
          dernierNiv.push(item);  
      }

    }); 
    
    
      // Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make
      // For details, see https://gojs.net/latest/intro/buildingObjects.html
      const $ = go.GraphObject.make;  // for more concise visual tree definitions

      // colors used, named for easier identification
      var blue = "#0288D1";
      var pink = "#B71C1C";
      var pinkfill = "#F8BBD0";
      var bluefill = "#B3E5FC";

      myDiagram =
        $(go.Diagram, "myDiagramDiv",
          {
            initialAutoScale: go.Diagram.Uniform,
            layout: $(go.LayeredDigraphLayout)
          });

      // The node template shows the activity name in the middle as well as
      // various statistics about the activity, all surrounded by a border.
      // The border's color is determined by the node data's ".critical" property.
      // Some information is not available as properties on the node data,
      // but must be computed -- we use converter functions for that.
      myDiagram.nodeTemplate =
        $(go.Node, "Auto",
          $(go.Shape, "Rectangle",  // the border
            { fill: "white", strokeWidth: 2 },
            new go.Binding("fill", "critical", b => b ? pinkfill : bluefill),
            new go.Binding("stroke", "critical", b => b ? pink : blue)),
          $(go.Panel, "Table",
            { padding: 0.5 },
            $(go.RowColumnDefinition, { column: 1, separatorStroke: "black" }),
            $(go.RowColumnDefinition, { column: 2, separatorStroke: "black" }),
            $(go.RowColumnDefinition, { row: 1, separatorStroke: "black", background: "white", coversSeparators: true }),
            $(go.RowColumnDefinition, { row: 2, separatorStroke: "black" }),
            $(go.TextBlock, // earlyStart
              new go.Binding("text", "earlyStart"),
              { row: 0, column: 0, margin: 5, textAlign: "center" }),
            $(go.TextBlock,
              new go.Binding("text", "length"),
              { row: 0, column: 1, margin: 5, textAlign: "center" }),
            $(go.TextBlock,  // earlyFinish
              new go.Binding("text", "",
                d => (d.earlyStart + d.length).toFixed(2)),
              { row: 0, column: 2, margin: 5, textAlign: "center" }),

            $(go.TextBlock,
              new go.Binding("text", "text"),
              {
                row: 1, column: 0, columnSpan: 3, margin: 5,
                textAlign: "center", font: "bold 14px sans-serif"
              }),

            $(go.TextBlock,  // lateStart
              new go.Binding("text", "",
                d => (d.lateFinish - d.length).toFixed(2)),
              { row: 2, column: 0, margin: 5, textAlign: "center" }),
            $(go.TextBlock,  // slack
              new go.Binding("text", "",
                d => (d.lateFinish - (d.earlyStart + d.length)).toFixed(2)),
              { row: 2, column: 1, margin: 5, textAlign: "center" }),
            $(go.TextBlock, // lateFinish
              new go.Binding("text", "lateFinish"),
              { row: 2, column: 2, margin: 5, textAlign: "center" })
          )  // end Table Panel
        );  // end Node

      // The link data object does not have direct access to both nodes
      // (although it does have references to their keys: .from and .to).
      // This conversion function gets the GraphObject that was data-bound as the second argument.
      // From that we can get the containing Link, and then the Link.fromNode or .toNode,
      // and then its node data, which has the ".critical" property we need.
      //
      // But note that if we were to dynamically change the ".critical" property on a node data,
      // calling myDiagram.model.updateTargetBindings(nodedata) would only update the color
      // of the nodes.  It would be insufficient to change the appearance of any Links.
      function linkColorConverter(linkdata, elt) {
        var link = elt.part;
        if (!link) return blue;
        var f = link.fromNode;
        if (!f || !f.data || !f.data.critical) return blue;
        var t = link.toNode;
        if (!t || !t.data || !t.data.critical) return blue;
        return pink;  // when both Link.fromNode.data.critical and Link.toNode.data.critical
      }

      // The color of a link (including its arrowhead) is red only when both
      // connected nodes have data that is ".critical"; otherwise it is blue.
      // This is computed by the binding converter function.
      myDiagram.linkTemplate =
        $(go.Link,
          { toShortLength: 6, toEndSegmentLength: 20 },
          $(go.Shape,
            { strokeWidth: 4 },
            new go.Binding("stroke", "", linkColorConverter)),
          $(go.Shape,  // arrowhead
            { toArrow: "Triangle", stroke: null, scale: 1.5 },
            new go.Binding("fill", "", linkColorConverter))
        );

      // here's the data defining the graph
      var nodeDataArray = [
        { key: "Start", text: "Start", length: 0, earlyStart: 0, lateFinish: 0, critical: true },
        { key: 1, text: "1", length: 0, earlyStart: 0, lateFinish: 0, critical: true },
        { key: 2, text: "2", length: 4, earlyStart: 0, lateFinish: 4, critical: true },
        { key: 3, text: "3", length: 5.33, earlyStart: 0, lateFinish: 9.17, critical: false },
        { key: 4, text: "4", length: 5.17, earlyStart: 4, lateFinish: 9.17, critical: true },
        { key: 44, text: "44", length: 6.33, earlyStart: 4, lateFinish: 15.01, critical: false },
        { key: 45, text: "45", length: 6.33, earlyStart: 4, lateFinish: 15.01, critical: false },
        { key: 46, text: "46", length: 6.33, earlyStart: 4, lateFinish: 15.01, critical: false },
        { key: "Fin", text: "Fin", length: 6.33, earlyStart: 4, lateFinish: 15.01, critical: true },
        ];
      
      var linkDataArray = [];
    
       niveau1.forEach((item, index) => {
         linkDataArray.push({ from: "Start" , to: item }); 
      });
      tableTachePrecedent.forEach((item, index) => {
         linkDataArray.push({ from: item[1] , to: item[0] }); 
      });
      dernierNiveau.forEach((item, index) => {
         linkDataArray.push({ from: item , to: "Fin" }); 
      });
      myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);

      // create an unbound Part that acts as a "legend" for the diagram
      myDiagram.add(
        $(go.Node, "Auto",
          $(go.Shape, "Rectangle",  // the border
            { fill: bluefill }),
          $(go.Panel, "Table",
            $(go.RowColumnDefinition, { column: 1, separatorStroke: "black" }),
            $(go.RowColumnDefinition, { column: 2, separatorStroke: "black" }),
            $(go.RowColumnDefinition, { row: 1, separatorStroke: "black", background: bluefill, coversSeparators: true }),
            $(go.RowColumnDefinition, { row: 2, separatorStroke: "black" }),
            $(go.TextBlock, "Early Start",
              { row: 0, column: 0, margin: 5, textAlign: "center" }),
            $(go.TextBlock, "Length",
              { row: 0, column: 1, margin: 5, textAlign: "center" }),
            $(go.TextBlock, "Early Finish",
              { row: 0, column: 2, margin: 5, textAlign: "center" }),

            $(go.TextBlock, "Activity Name",
              {
                row: 1, column: 0, columnSpan: 3, margin: 5,
                textAlign: "center", font: "bold 14px sans-serif"
              }),

            $(go.TextBlock, "Late Start",
              { row: 2, column: 0, margin: 5, textAlign: "center" }),
            $(go.TextBlock, "Slack",
              { row: 2, column: 1, margin: 5, textAlign: "center" }),
            $(go.TextBlock, "Late Finish",
              { row: 2, column: 2, margin: 5, textAlign: "center" })
          )  // end Table Panel
        ));
    }
    window.addEventListener('DOMContentLoaded', init);
  </script>

<div id="sample">
  <div id="myDiagramDiv" style="border: 1px solid black; width: 100%; height: 400px; position: relative; -webkit-tap-highlight-color: rgba(255, 255, 255, 0);"><canvas tabindex="0" width="1555" height="597" style="position: absolute; top: 0px; left: 0px; z-index: 2; user-select: none; touch-action: none; width: 1037px; height: 398px;">This text is displayed if your browser does not support the Canvas HTML element.</canvas><div style="position: absolute; overflow: auto; width: 1037px; height: 398px; z-index: 1;"><div style="position: absolute; width: 1px; height: 1px;"></div></div></div>

   </div>
   <div class="js-tache-preced" data-is-authenticated="{{listeTachePreced}}"></div>
   <div class="js-table-niveau" data-is-authenticated="{{tableNiveau}}"></div>
   <div class="js-table-info-taches" data-is-authenticated="{{listeInfoTaches}}"></div>
   

{% endblock %}
